# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
compareRoutes <- function(wkt1,wkt2){
bng = "+init=epsg:27700"
proj4string(wkt1) <- CRS(bng)
proj4string(wkt2) <- CRS(bng)
coords1World <- spTransform(wkt1, CRS("+init=epsg:4326"))
coords2World <- spTransform(wkt2, CRS("+init=epsg:4326"))
map <- leaflet() %>% addTiles() %>%
addPolylines(data = coords2World, color = "green", dashArray=c(10,5)) %>%
addPolylines(data = coords1World, color = "#03F", dashArray=c(5,10)) %>%
addLegend("bottomright", colors = c("#03F", "green"), labels = c("Actual", "Routing")) %>%
# add layers control
addLayersControl(
#    overlayGroups = c("Study area", "Landsat scenes"),
options = layersControlOptions(collapsed = FALSE)
)
return(map)
}
plotJourneyTime()
plotquart("Route prediction duration error \nby journey time (road link method)", m1_5)
plotit("","Route prediction duration error\nusing Road link averages", m2_5,m1_5)
ploterrors(m1_5, "Road link method" )
raw_summary <- data[data$RoutingMethod==1 & !is.na(data$qB1),] %>%
group_by(EdgeMethod) %>%
summarise (
q4 = mean(qB4),
q3 = mean(qB3),
q2 = mean(qB2),
q1 = mean(qB1)
#    skewness(delta),
#    kurtosis(delta)
)
raw_summary$Label <- factor(raw_summary$EdgeMethod,
levels = c(3,4,5,10,21,22,23),
labels = c("HoD", "HoW", "Road link","Constant Speed","Road type LAS","Road type GPS","Road type HMM/V"))
raw_summary_2 <- gather(raw_summary, sector, coverage, -Label, -EdgeMethod)
raw_summary_2 <- raw_summary_2[order(3),]
ggplot(raw_summary_2, aes(Label, coverage, fill=sector)) +
theme_bw() +
theme(text = element_text(size=20), axis.text.x = element_text(angle=45, hjust=1)) +
geom_bar(stat="identity", aes(fill = sector)) +
labs(x = "", y="Similarity")
raw_summary <- data[data$RoutingMethod==1 & !is.na(data$qB1),] %>%
group_by(EdgeMethod) %>%
summarise (
q4 = mean(qB4),
q3 = mean(qB3),
q2 = mean(qB2),
q1 = mean(qB1)
#    skewness(delta),
#    kurtosis(delta)
)
raw_summary$Label <- factor(raw_summary$EdgeMethod,
levels = c(3,4,5,10,21,22,23),
labels = c("HoD", "HoW", "Road link","Constant Speed","Road type LAS","Road type GPS","Road type HMM/V"))
raw_summary_2 <- gather(raw_summary, sector, coverage, -Label, -EdgeMethod)
ggplot(raw_summary_2, aes(Label, coverage, fill=sector)) +
theme_bw() +
theme(text = element_text(size=20), axis.text.x = element_text(angle=45, hjust=1)) +
geom_bar(stat="identity", aes(fill = sector)) +
labs(x = "", y="Similarity")
par(mfrow = c(1, 1))  # 1 rows and 1 columns
filtered <- data[ data$IncidentRouteID==1253887 & data$EdgeMethod==21 & data$RoutingMethod==1,]
coords1  <- readWKT(filtered$Orig[1])
coords2  <- readWKT(filtered$NewPath[1])
p<-compareRoutes(coords1,coords2)
p
library(ggplot2)
library(RODBC)
library(fitdistrplus)
library(sm)
library(plyr)
rm( list = ls())
dbhandle <- odbcDriverConnect('driver={SQL Server};server=.;database=questdata;trusted_connection=true')
cmd = 'SELECT
top 10000
RLE.RoadTypeId, RSI.Speed
FROM              dbo.RoadSpeedItem AS RSI  INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE        (RSI.Speed IS NOT NULL and rsi.speed>0)
AND RSI.Speed<75
'
data <- sqlQuery(dbhandle, cmd)
m <- 1/mean(1/data$Speed)
ddply(data, .(RoadTypeId), summarize,  Avg=1/mean(1/Speed))
ddply(data, .(RoadTypeId), summarize,  Avg=1/mean(1/Speed), Avg2=mean(Speed))
View(data)
cmd = 'SELECT
top 10000
RLE.RoadTypeId, RSI.Speed
FROM              dbo.RoadSpeedItem AS RSI  INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE        (RSI.Speed IS NOT NULL and rsi.speed>0)
AND RSI.Speed<75
'
data <- sqlQuery(dbhandle, cmd)
cmd = 'SELECT
top 100000
RLE.RoadTypeId, RSI.Speed
FROM              dbo.RoadSpeedItem AS RSI  INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE        (RSI.Speed IS NOT NULL and rsi.speed>0)
AND RSI.Speed<75
'
cmd = 'SELECT
top 100000
RLE.RoadTypeId, RSI.Speed
FROM              dbo.RoadSpeedItem AS RSI  INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE        (RSI.Speed IS NOT NULL and rsi.speed>0)
AND RSI.Speed<75
'
##and roadtypeid=3
##convert(real, rle.Length)/(convert(real, rsi.speed) * 0.44704) as duration
data <- sqlQuery(dbhandle, cmd)
cmd = 'SELECT
top 1000000
RLE.RoadTypeId, RSI.Speed
FROM              dbo.RoadSpeedItem AS RSI  INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE        (RSI.Speed IS NOT NULL and rsi.speed>0)
AND RSI.Speed<75
'
##and roadtypeid=3
##convert(real, rle.Length)/(convert(real, rsi.speed) * 0.44704) as duration
data <- sqlQuery(dbhandle, cmd)
hist(dist$Speed)
hist(data$Speed)
plot(data$RoadTypeId ~ data$Speed)
library(ggplot2)
library(RODBC)
library(fitdistrplus)
library(sm)
library(plyr)
library(rgl)
library(leaflet)
library(plot3D)
rm( list = ls())
node <- Sys.info()["nodename"]
root <- ifelse (node=="MP-LAPTOP3", "c:\\Users\\Marcu\\Dropbox\\Apps\\ShareLaTeX\\Project_Update_Year_2_v2\\","e:\\Dropbox\\Apps\\ShareLaTeX\\Project_Update_Year_2_v2\\")
#setwd( root )
images <- paste(root , "images\\", sep="")
dbhandle <- odbcDriverConnect('driver={SQL Server};server=.;database=questdata;trusted_connection=true')
cmd = 'SELECT
top 1000000 RLE.RoadTypeId, RSI.Speed , X, Y
FROM
dbo.RoadSpeedItem AS RSI
INNER JOIN
Quest.dbo.RoadLinkEdge AS RLE ON RLE.RoadLinkEdgeId = RSI.RoadLinkEdgeId
WHERE
(RSI.Speed IS NOT NULL and rsi.speed>0) AND RSI.Speed<80
'
data <- sqlQuery(dbhandle, cmd)
data <- data[ data$Speed<80, ]
data$Road <- factor(data$RoadTypeId,
levels = c(1:9),
labels = c("A Road","Alley","B Road","Local Street","Minor Road","Motorway","Pedestrianised Street","Private Road - Publicly Accessible","Private Road - Restricted Access"))
ggplot(data, aes(Speed, fill = Road)) + geom_density(alpha = 0.2)
data$X = round(data$X / 100,0)*100
data$Y = round(data$Y / 100,0)*100
minx=min(data$X)
maxx=max(data$X)
miny=min(data$Y)
maxy=max(data$Y)
xr = (maxx-minx)/500
yr = (maxy-miny)/500
data$CellX = round( (data$X-minx) / 500,0)
data$CellY = round( (data$Y-miny) / 500,0)
ddply(data, .(RoadTypeId), summarize,  Avg=1/mean(1/Speed), Avg2=mean(Speed))
require(OpenStreetMap)
install.packages("OpenStreetMap")
library(OpenStreetMap)
require(rgl)
open3d()               # R crashes if this is done later(?)
#Sys.setenv(NOAWT=1)   # fix an {OSM} X11 issue in Mac
require(OpenStreetMap)
require(ggplot2)
lat <- c(53, 50); lon <- c(-5, 1)
map <- openmap(c(lat[1],lon[1]),c(lat[2],lon[2]), 5, 'osm')
map <- openproj(map)
rgl.surface(map)
data(volcano);
z<-3*volcano;
x<-10*(1:nrow(z));
y<-10*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
View(volcano)
data(volcano);
z<-volcano;
x<-10*(1:nrow(z));
y<-10*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
data(volcano);
z<-volcano;
x<-1*(1:nrow(z));
y<-1*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
data(volcano);
z<-volcano;
x<-1*(1:nrow(z));
y<-1*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
library(reshape2)
acast(data, CellX~cellY, value.var="Speed")
acast(data, CellX~CellY, value.var="Speed")
m <- acast(data, CellX~CellY, value.var="Speed")
m <- acast(data, CellX~CellY, value.var="Speed", fun.aggregate=mean)
View(m)
m <- acast(data, CellX~CellY, value.var="Speed", fun.aggregate=mean)
z<-m;
x<-1*(1:nrow(z));
y<-1*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
m <- acast(data, CellX~CellY, value.var="Speed", fun.aggregate=mean)
z<-m;
x<-10*(1:nrow(z));
y<-10*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
m <- acast(data[data$RoadTypeId==1], CellX~CellY, value.var="Speed", fun.aggregate=mean)
m <- acast(data[data$RoadTypeId==1,], CellX~CellY, value.var="Speed", fun.aggregate=mean)
z<-m;
x<-10*(1:nrow(z));
y<-10*(1:ncol(z));
zlim<-range(z);
zlen<-zlim[2]-zlim[1]+1;
colorlut<-terrain.colors(zlen,alpha=0);
col<-colorlut[z-zlim[1]+1];
open3d();
rgl.surface(x,y,z,color=col,alpha=1,back="lines");
#add the contour map in different color
colorlut <- heat.colors(zlen,alpha=1);
col<-colorlut[z-zlim[1]+1];
rgl.surface(x,y,matrix(1,nrow(z),ncol(z)),color=col,back="fill");
View(m)
cellsize = 500
data$X = round(data$X / cellsize,0)*cellsize
data$Y = round(data$Y / cellsize,0)*cellsize
minx=min(data$X)
maxx=max(data$X)
miny=min(data$Y)
maxy=max(data$Y)
xr = (maxx-minx)/cellsize
yr = (maxy-miny)/cellsize
data$CellX = round( (data$X-minx) / cellsize,0)
data$CellY = round( (data$Y-miny) / cellsize,0)
cellsize = 1000
data$X = round(data$X / cellsize,0)*cellsize
data$Y = round(data$Y / cellsize,0)*cellsize
minx=min(data$X)
maxx=max(data$X)
miny=min(data$Y)
maxy=max(data$Y)
xr = (maxx-minx)/cellsize
yr = (maxy-miny)/cellsize
data$CellX = round( (data$X-minx) / cellsize,0)
data$CellY = round( (data$Y-miny) / cellsize,0)
ddply(data, .(RoadTypeId), summarize,  Avg=1/mean(1/Speed), Avg2=mean(Speed))
library(car)
library(MASS)
rm( list = ls())
file <-"https://www.dropbox.com/s/23inujt55zmo9hh/GoogleRoutingResults.csv?raw=1"
raw = read.csv(file, header = TRUE, sep = ",", quote = "\"")  # read csv file
raw$HoD <- raw$HoW %% 24
raw$EstimateDelta = abs(raw$EstimatedDuration-raw$EstimatedDurationTraffic)
raw$ActualDelta = abs(raw$ActualDuration-raw$EstimatedDurationTraffic)
scatterplot(EstimatedDurationTraffic ~ EstimatedDuration , data = raw, xlab="Estimate Journey time (s)", ylab="Estimated Journey time in Traffic (s)", main="Estimated journey time vs. Estimated Journey time in traffic")
raw$BinnedLength <- round(raw$EstimatedDistance / 1000,0)
raw$BinnedDuration <- round(raw$ActualDuration / 60,0)
boxplot(EstimateDelta~BinnedLength,data=raw, main="Difference in Google journey estimates by length of trip", xlab="Journey length (km)", ylab="Journey time delta (s)")
boxplot(EstimateDelta~HoD,data=raw, main="Difference in Google journey times factored for traffic by time of day", xlab="Hour of Day", ylab="Journey time delta (s)")
fit <- fitdistr(raw$ActualDuration,"lognormal")
vehicle_factor = c("Ambulance","FRU")
raw$vehicle <- factor(raw$Vehicleid, levels = c(1:2), labels = vehicle_factor)
qj <- quantile(raw$ActualDuration,probs = c(0.99), na.rm = TRUE)
hist(raw$ActualDuration,
breaks=100,
freq=FALSE,
xlim=c(0,4000),
ylim=c(0,0.002),
xlab="Actual journey time (s)",
main="Histogram of Actual Journey Times")
# fit the log normal curve over the top
curve(dlnorm(x, meanlog=fit$estimate["meanlog"]  ,sdlog=fit$estimate["sdlog"]),
col = "blue", lty = 1, lwd = 1 ,add=TRUE)
# add the 99% line
abline(v = qj[1], col = "dark red",lwd=3, lty=3)
plot(raw$EstimatedDurationTraffic ~ raw$ActualDuration, xlab="Actual Ambulance Journey time(s)", ylab="Google Estimated Car Journey time(s)", main="Actual Ambulance Journey Time vs. Estimated Journey Time")
filtered <- raw[raw$ActualDuration<1500,]
scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
scatterplot(EstimatedDurationTraffic ~ ActualDuration , data = filtered, xlab="Actual Ambulance Journey time(s)", ylab="Google Estimated Car Journey time(s)", main="Actual journey time vs. Estimated Journey Time in Traffic")
scatterplot(EstimatedDuration ~ ActualDuration ,
data = filtered[filtered$Vehicleid==1,],
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of Ambulance journey time vs. Estimated Journey Time in Traffic")
scatterplot(EstimatedDurationTraffic ~ ActualDuration ,
data = filtered[filtered$Vehicleid==2,],
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
scatterplot(EstimatedDuration ~ ActualDuration|vehicle,
data = filtered,
reg.line = F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
boxplot(EstimateDelta~BinnedDuration,data=filtered, main="Difference in Google journey times factored for traffic by time of day", xlab="Hour of Day", ylab="Journey time delta (s)")
scatterplot(EstimatedDuration ~ vehicle | ActualDuration,
data = filtered,
reg.line = F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
loess(EstimatedDurationTraffic ~ ActualDuration)
aeu <- filtered[filtered$Vehicleid==1,]
fru <- filtered[filtered$Vehicleid==2,]
loess(EstimatedDurationTraffic ~ ActualDuration, fru)
fru.loess = loess(EstimatedDurationTraffic ~ ActualDuration, fru)
fru.loess
fru.loess
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration, fru)
scatterplot(EstimatedDurationTraffic ~ ActualDuration ,
data = fru,
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
anova(fru.lm)
summary(lm.D90)
summary(fru.lm)
anova(fru.lm)
summary(fru.lm)
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, fru)
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, fru)
summary(fru.lm)
anova(fru.lm)
anova(fru.lm)
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, fru)
anova(fru.lm)
summary(fru.lm)
fru.lm = lm(EstimatedDurationTraffic + 0 ~ ActualDuration, fru)
anova(fru.lm)
summary(fru.lm)
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration, fru)
anova(fru.lm)
summary(fru.lm)
fru.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, fru)
anova(fru.lm)
summary(fru.lm)
scatterplot(EstimatedDurationTraffic ~ ActualDuration - 1,
data = fru,
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
scatterplot(EstimatedDurationTraffic ~ ActualDuration - 1,
data = fru,
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
abline(lm(mpg~wt), col="red") # regression line (y~x)
scatterplot(EstimatedDurationTraffic ~ ActualDuration - 1,
data = fru,
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
abline(fru.lm, col="green") # regression line (y~x)
scatterplot(EstimatedDurationTraffic ~ ActualDuration - 1,
data = fru,
reg.line=F,
xlab="FRU Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Plot of FRU journey time vs. Estimated Journey Time in Traffic")
abline(fru.lm, col="green") # regression line (y~x)
aeu.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, aeu)
anova(aeu.lm)
summary(aeu.lm)
aeu.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, aeu)
aeu <- filtered[filtered$Vehicleid==1 ,]
fru <- filtered[filtered$Vehicleid==2 & filtered$ActualDuration<=1000,]
scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
all.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, filtered)
all.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, filtered)
scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
reg.line=F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
abline(all.lm, col="green") # regression line (y~x)
all.lm
all.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, filtered)
scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
reg.line=F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
abline(all.lm, col="green") # regression line (y~x)
#all.lm = lm(EstimatedDurationTraffic ~ ActualDuration - 1, filtered)
scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
#            reg.line=F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
p<-scatterplot(EstimatedDuration ~ ActualDuration,
data = filtered,
#            reg.line=F,
xlab="Actual Ambulance Journey time(s)",
ylab="Google Estimated Car Journey time(s)",
main="Actual Journey Time vs. Estimated Journey Time using Standard Model")
`r aeu.lm@coefficient[1]`
aeu.lm@coefficient[1]
aeu.lm@coefficient[1]
The first plot is of ambulances only, using the traffic model. The regression line, assume a 0 intercept, gives a slope of `r aeu.lm@coefficient[1]`
The first plot is of ambulances only, using the traffic model. The regression line, assume a 0 intercept, gives us an estimate that ambulances are `r aeu.lm@coefficient[1]` times faster than cars.
shiny::runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
devtools::install_github('bhaskarvk/leaflet.extras')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
shiny::runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
runApp('E:/Dropbox/Quest/Git/Quest/src/Quest.MapR')
