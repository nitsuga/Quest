//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quest.Lib.Simulation.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuestSimEntities : DbContext
    {
        public QuestSimEntities()
            : base("name=QuestSimEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AMPDScode> AMPDScodes { get; set; }
        public virtual DbSet<CadLinkIncident> CadLinkIncidents { get; set; }
        public virtual DbSet<Coverage> Coverages { get; set; }
        public virtual DbSet<Destination> Destinations { get; set; }
        public virtual DbSet<Determinant> Determinants { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<ProfileParameter> ProfileParameters { get; set; }
        public virtual DbSet<ProfileParameterType> ProfileParameterTypes { get; set; }
        public virtual DbSet<Roster> Rosters { get; set; }
        public virtual DbSet<SimulationAssignment> SimulationAssignments { get; set; }
        public virtual DbSet<SimulationIncident> SimulationIncidents { get; set; }
        public virtual DbSet<SimulationOrcon> SimulationOrcons { get; set; }
        public virtual DbSet<SimulationResult> SimulationResults { get; set; }
        public virtual DbSet<SimulationRun> SimulationRuns { get; set; }
        public virtual DbSet<SimulationStat> SimulationStats { get; set; }
        public virtual DbSet<StationCatchment> StationCatchments { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }
        public virtual DbSet<IncidentType> IncidentTypes { get; set; }
        public virtual DbSet<OnsceneStat> OnsceneStats { get; set; }
        public virtual DbSet<VehicleRoster> VehicleRosters { get; set; }
        public virtual DbSet<DestinationsView> DestinationsViews { get; set; }
        public virtual DbSet<HighLevelList> HighLevelLists { get; set; }
        public virtual DbSet<VehicleRosterView> VehicleRosterViews { get; set; }
        public virtual DbSet<VehicleView> VehicleViews { get; set; }
    
        public virtual int ClearRunData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearRunData");
        }
    
        public virtual int CloneProfile(Nullable<int> sourceId, string description)
        {
            var sourceIdParameter = sourceId.HasValue ?
                new ObjectParameter("SourceId", sourceId) :
                new ObjectParameter("SourceId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloneProfile", sourceIdParameter, descriptionParameter);
        }
    
        public virtual int ImportIncidents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportIncidents");
        }
    
        public virtual int ImportVehicleRoster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportVehicleRoster");
        }
    
        public virtual int LoadDestinations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadDestinations");
        }
    
        public virtual int MinuteClean()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MinuteClean");
        }
    
        public virtual ObjectResult<ShowStatus_Result> ShowStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowStatus_Result>("ShowStatus");
        }
    
        public virtual int UpdateOrcon(Nullable<int> simulationRunId)
        {
            var simulationRunIdParameter = simulationRunId.HasValue ?
                new ObjectParameter("SimulationRunId", simulationRunId) :
                new ObjectParameter("SimulationRunId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrcon", simulationRunIdParameter);
        }
    }
}
