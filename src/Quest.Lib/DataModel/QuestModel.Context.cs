//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quest.Lib.DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;

    public partial class QuestEntities : DbContext
    {
        public QuestEntities()
            : base("name=QuestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Callsign> Callsigns { get; set; }
        public virtual DbSet<Destination> Destinations { get; set; }
        public virtual DbSet<DeviceRole> DeviceRoles { get; set; }
        public virtual DbSet<ResourceStatu> ResourceStatus { get; set; }
        public virtual DbSet<Variable> Variables { get; set; }
        public virtual DbSet<ResourceCallsignView> ResourceCallsignViews { get; set; }
        public virtual DbSet<MapOverlay> MapOverlays { get; set; }
        public virtual DbSet<MapOverlayItem> MapOverlayItems { get; set; }
        public virtual DbSet<RoadType> RoadTypes { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<ResourceStatusHistory> ResourceStatusHistories { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<ProfileParameter> ProfileParameters { get; set; }
        public virtual DbSet<ProfileParameterType> ProfileParameterTypes { get; set; }
        public virtual DbSet<CoverageMapDefinition> CoverageMapDefinitions { get; set; }
        public virtual DbSet<CoverageMapStore> CoverageMapStores { get; set; }
        public virtual DbSet<RoadSpeed> RoadSpeeds { get; set; }
        public virtual DbSet<SecuredItemLink> SecuredItemLinks { get; set; }
        public virtual DbSet<SecuredItem> SecuredItems { get; set; }
        public virtual DbSet<RoadSpeedMatrixDoW> RoadSpeedMatrixDoWs { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoW> RoadSpeedMatrixHoWs { get; set; }
        public virtual DbSet<RoadLinkEdge> RoadLinkEdges { get; set; }
        public virtual DbSet<RoadLinkEdgeLink> RoadLinkEdgeLinks { get; set; }
        public virtual DbSet<RoadSpeedMatrixDoWSummary> RoadSpeedMatrixDoWSummaries { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoWSummary> RoadSpeedMatrixHoWSummaries { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoD> RoadSpeedMatrixHoDs { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoDSummary> RoadSpeedMatrixHoDSummaries { get; set; }
        public virtual DbSet<ResourceType> ResourceTypes { get; set; }
        public virtual DbSet<DestinationView> DestinationViews { get; set; }
        public virtual DbSet<MapOverlayItemView> MapOverlayItemViews { get; set; }
        public virtual DbSet<Call> Calls { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<DeviceView> DeviceViews { get; set; }
        public virtual DbSet<IncidentView> IncidentViews { get; set; }
        public virtual DbSet<ResourceView> ResourceViews { get; set; }
    
        public virtual int CleanRoads()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanRoads");
        }
    
        public virtual int GetOverlayAt(string overlayName, Nullable<int> easting, Nullable<int> northing, ObjectParameter result)
        {
            var overlayNameParameter = overlayName != null ?
                new ObjectParameter("OverlayName", overlayName) :
                new ObjectParameter("OverlayName", typeof(string));
    
            var eastingParameter = easting.HasValue ?
                new ObjectParameter("Easting", easting) :
                new ObjectParameter("Easting", typeof(int));
    
            var northingParameter = northing.HasValue ?
                new ObjectParameter("Northing", northing) :
                new ObjectParameter("Northing", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetOverlayAt", overlayNameParameter, eastingParameter, northingParameter, result);
        }
    
        public virtual int PrimeDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PrimeDatabase");
        }
    
        public virtual ObjectResult<Nullable<long>> GetRevision()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetRevision");
        }
    
        public virtual ObjectResult<ResourceAtRevision_Result> ResourceAtRevision(Nullable<long> revision)
        {
            var revisionParameter = revision.HasValue ?
                new ObjectParameter("revision", revision) :
                new ObjectParameter("revision", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResourceAtRevision_Result>("ResourceAtRevision", revisionParameter);
        }
    
        public virtual int Clean()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Clean");
        }
    
        public virtual ObjectResult<GetIncidentDensity_Result> GetIncidentDensity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncidentDensity_Result>("GetIncidentDensity");
        }
    
        public virtual ObjectResult<string> GetOperationalArea(Nullable<int> buffer)
        {
            var bufferParameter = buffer.HasValue ?
                new ObjectParameter("Buffer", buffer) :
                new ObjectParameter("Buffer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetOperationalArea", bufferParameter);
        }
    
        public virtual ObjectResult<GetVehicleCoverage_Result> GetVehicleCoverage(Nullable<int> vehtype)
        {
            var vehtypeParameter = vehtype.HasValue ?
                new ObjectParameter("vehtype", vehtype) :
                new ObjectParameter("vehtype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleCoverage_Result>("GetVehicleCoverage", vehtypeParameter);
        }
    
        public virtual int CleanCoverage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanCoverage");
        }
    
        public virtual ObjectResult<GetClaims_Result> GetClaims(string claimType, string claimValue)
        {
            var claimTypeParameter = claimType != null ?
                new ObjectParameter("ClaimType", claimType) :
                new ObjectParameter("ClaimType", typeof(string));
    
            var claimValueParameter = claimValue != null ?
                new ObjectParameter("ClaimValue", claimValue) :
                new ObjectParameter("ClaimValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaims_Result>("GetClaims", claimTypeParameter, claimValueParameter);
        }
    }
}
