//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quest.Lib.Research.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuestResearchEntities : DbContext
    {
        public QuestResearchEntities()
            : base("name=QuestResearchEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<IncidentRouteEstimate> IncidentRouteEstimates { get; set; }
        public virtual DbSet<IncidentRouteRun> IncidentRouteRuns { get; set; }
        public virtual DbSet<Avl> Avls { get; set; }
        public virtual DbSet<Activation> Activations { get; set; }
        public virtual DbSet<RoadSpeed> RoadSpeeds { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoD> RoadSpeedMatrixHoDs { get; set; }
        public virtual DbSet<RoadSpeedMatrixHoW> RoadSpeedMatrixHoWs { get; set; }
        public virtual DbSet<IncidentRoute> IncidentRoutes { get; set; }
        public virtual DbSet<RoadSpeedItem> RoadSpeedItems { get; set; }
        public virtual DbSet<AvlsRoad> AvlsRoads { get; set; }
        public virtual DbSet<IncidentRouteView> IncidentRouteViews { get; set; }
    
        public virtual int UpdateIncidentEstimates(Nullable<int> id, Nullable<int> routingMethod, Nullable<int> edgeMethod, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> estimatedDuration)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var routingMethodParameter = routingMethod.HasValue ?
                new ObjectParameter("RoutingMethod", routingMethod) :
                new ObjectParameter("RoutingMethod", typeof(int));
    
            var edgeMethodParameter = edgeMethod.HasValue ?
                new ObjectParameter("EdgeMethod", edgeMethod) :
                new ObjectParameter("EdgeMethod", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var estimatedDurationParameter = estimatedDuration.HasValue ?
                new ObjectParameter("EstimatedDuration", estimatedDuration) :
                new ObjectParameter("EstimatedDuration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentEstimates", idParameter, routingMethodParameter, edgeMethodParameter, startTimeParameter, endTimeParameter, estimatedDurationParameter);
        }
    
        public virtual int CalcRoadSpeeds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CalcRoadSpeeds");
        }
    
        public virtual int UpdateIncidentDuration(Nullable<int> id, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> duration)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidentDuration", idParameter, startTimeParameter, endTimeParameter, durationParameter);
        }
    }
}
